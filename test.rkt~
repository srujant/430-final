#lang racket
(require "utils.rkt")
(define (init? e [env (set)]) 
  (define (var? x) (symbol? x))
  (define ((rec/with env) e)
    (init? e env))
  (define (no-duplicates? lst)
    (= (set-count (list->set lst)) (length lst)))
  (define (ext env lst)
    (set-union env (list->set lst)))
  (define (improper-args? args)
    (if (var? args)
        #t
        (and (cons? args)
             (var? (car args))
             (improper-args? (cdr args)))))
  (define (cond-clause? cls) 
    (match cls
           [`(,(? (rec/with env))) #t]
           [`(,(? (rec/with env)) ,(? (rec/with env))) #t]
           [else #f]))
  (define (case-clause? cls) 
    (match cls
           [`((,(? datum?) ...) ,(? (rec/with env))) #t]
           [else #f]))
  (match e
         [`(letrec* ([,(? var? xs) ,es] ...) ,e0)
          (and (no-duplicates? xs)
               (andmap (rec/with (ext env xs))
                       (cons e0 es)))]
         [`(letrec ([,(? var? xs) ,es] ...) ,e0)
          (and (no-duplicates? xs)
               (andmap (rec/with (ext env xs))
                       (cons e0 es)))]
         
         [`(let* () ,e0)
          ((rec/with env) e0)]
         [`(let* ([,x ,e0]) ,e1)
          ((rec/with env) `(let ([,x ,e0]) ,e1))]
         [`(let* ([,x ,e0] . ,rest) ,e1)
          ((rec/with env) `(let ([,x ,e0]) (let* ,rest ,e1)))]
         
         [`(let ([,(? symbol? xs) ,(? (rec/with env) es)] ...) ,e0)
          (and (no-duplicates? xs)
               ((rec/with (ext env xs)) e0))]
         [`(let ,(? var? lp)  ([,xs ,es] ...) ,e0)
          ((rec/with env) `(letrec ([,lp (lambda ,xs ,e0)]) (,lp . ,es)))]
         
         [`(lambda (,(? var? xs) ...) ,e0)
          (and (no-duplicates? xs)
               ((rec/with (ext env xs)) e0))]
         [`(lambda ,(? var? x) ,e0)
          ((rec/with (ext env (list x))) e0)]
         [`(lambda ,(? improper-args? args) ,e0)
          (and (no-duplicates? (flatten args))
               ((rec/with (ext env (flatten args))) e0))]
         
         [`(delay ,(? (rec/with env))) #t]
         [`(force ,(? (rec/with env))) #t]
         [`(guard (,(? symbol? x) ,clauses ...) ,(? (rec/with env)))
          (init? `(cond . ,clauses) (ext env (list x)))]
         [`(raise ,(? (rec/with env))) #t]
         [`(dynamic-wind ,(? (rec/with env)) ,(? (rec/with env)) ,(? (rec/with env))) #t]
         [`(cond ,(? cond-clause?) ...) #t]
         [`(cond ,(? cond-clause?) ... (else ,(? (rec/with env)))) #t]
         [`(case ,(? (rec/with env)) ,(? case-clause?) ...) #t]
         [`(case ,(? (rec/with env)) ,(? case-clause?) ... (else ,(? (rec/with env)))) #t]
         [`(and ,(? (rec/with env)) ...) #t]
         [`(or ,(? (rec/with env)) ...) #t]
         [`(when ,(? (rec/with env)) ,(? (rec/with env))) #t]
         [`(unless ,(? (rec/with env)) ,(? (rec/with env))) #t]
         [`(if ,(? (rec/with env)) ,(? (rec/with env)) ,(? (rec/with env))) #t]
         [`(set! ,(? symbol?) ,(? (rec/with env))) #t]
         [`(begin ,(? (rec/with env)) ,(? (rec/with env)) ...) #t]
         [`(call/cc ,(? (rec/with env))) #t]
         [`(let/cc ,(? symbol? x) ,eb) ((rec/with (ext env (list x))) eb)]

         [(? var? x) (if (set-member? env x) #t (prim? x))]
         [`(quote ,(? datum?)) #t]

         [`(,(? prim?) ,(? (rec/with env)) ...) #t]
         [`(apply ,(? (rec/with env)) ,(? (rec/with env))) #t]
         [`(,(? (rec/with env)) ,(? (rec/with env)) ...) #t]
         [else #t]
         ))
